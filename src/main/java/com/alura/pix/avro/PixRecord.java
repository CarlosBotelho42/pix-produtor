/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.alura.pix.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PixRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6959727658868739337L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PixRecord\",\"namespace\":\"com.alura.pix.avro\",\"fields\":[{\"name\":\"identificador\",\"type\":\"string\"},{\"name\":\"chaveOrigem\",\"type\":\"string\"},{\"name\":\"chaveDestino\",\"type\":\"string\"},{\"name\":\"valor\",\"type\":\"double\"},{\"name\":\"dataTransferencia\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PixRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PixRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PixRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PixRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PixRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PixRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PixRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PixRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PixRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence identificador;
  private java.lang.CharSequence chaveOrigem;
  private java.lang.CharSequence chaveDestino;
  private double valor;
  private java.lang.CharSequence dataTransferencia;
  private java.lang.CharSequence status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PixRecord() {}

  /**
   * All-args constructor.
   * @param identificador The new value for identificador
   * @param chaveOrigem The new value for chaveOrigem
   * @param chaveDestino The new value for chaveDestino
   * @param valor The new value for valor
   * @param dataTransferencia The new value for dataTransferencia
   * @param status The new value for status
   */
  public PixRecord(java.lang.CharSequence identificador, java.lang.CharSequence chaveOrigem, java.lang.CharSequence chaveDestino, java.lang.Double valor, java.lang.CharSequence dataTransferencia, java.lang.CharSequence status) {
    this.identificador = identificador;
    this.chaveOrigem = chaveOrigem;
    this.chaveDestino = chaveDestino;
    this.valor = valor;
    this.dataTransferencia = dataTransferencia;
    this.status = status;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identificador;
    case 1: return chaveOrigem;
    case 2: return chaveDestino;
    case 3: return valor;
    case 4: return dataTransferencia;
    case 5: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identificador = (java.lang.CharSequence)value$; break;
    case 1: chaveOrigem = (java.lang.CharSequence)value$; break;
    case 2: chaveDestino = (java.lang.CharSequence)value$; break;
    case 3: valor = (java.lang.Double)value$; break;
    case 4: dataTransferencia = (java.lang.CharSequence)value$; break;
    case 5: status = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'identificador' field.
   * @return The value of the 'identificador' field.
   */
  public java.lang.CharSequence getIdentificador() {
    return identificador;
  }


  /**
   * Sets the value of the 'identificador' field.
   * @param value the value to set.
   */
  public void setIdentificador(java.lang.CharSequence value) {
    this.identificador = value;
  }

  /**
   * Gets the value of the 'chaveOrigem' field.
   * @return The value of the 'chaveOrigem' field.
   */
  public java.lang.CharSequence getChaveOrigem() {
    return chaveOrigem;
  }


  /**
   * Sets the value of the 'chaveOrigem' field.
   * @param value the value to set.
   */
  public void setChaveOrigem(java.lang.CharSequence value) {
    this.chaveOrigem = value;
  }

  /**
   * Gets the value of the 'chaveDestino' field.
   * @return The value of the 'chaveDestino' field.
   */
  public java.lang.CharSequence getChaveDestino() {
    return chaveDestino;
  }


  /**
   * Sets the value of the 'chaveDestino' field.
   * @param value the value to set.
   */
  public void setChaveDestino(java.lang.CharSequence value) {
    this.chaveDestino = value;
  }

  /**
   * Gets the value of the 'valor' field.
   * @return The value of the 'valor' field.
   */
  public double getValor() {
    return valor;
  }


  /**
   * Sets the value of the 'valor' field.
   * @param value the value to set.
   */
  public void setValor(double value) {
    this.valor = value;
  }

  /**
   * Gets the value of the 'dataTransferencia' field.
   * @return The value of the 'dataTransferencia' field.
   */
  public java.lang.CharSequence getDataTransferencia() {
    return dataTransferencia;
  }


  /**
   * Sets the value of the 'dataTransferencia' field.
   * @param value the value to set.
   */
  public void setDataTransferencia(java.lang.CharSequence value) {
    this.dataTransferencia = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Creates a new PixRecord RecordBuilder.
   * @return A new PixRecord RecordBuilder
   */
  public static com.alura.pix.avro.PixRecord.Builder newBuilder() {
    return new com.alura.pix.avro.PixRecord.Builder();
  }

  /**
   * Creates a new PixRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PixRecord RecordBuilder
   */
  public static com.alura.pix.avro.PixRecord.Builder newBuilder(com.alura.pix.avro.PixRecord.Builder other) {
    if (other == null) {
      return new com.alura.pix.avro.PixRecord.Builder();
    } else {
      return new com.alura.pix.avro.PixRecord.Builder(other);
    }
  }

  /**
   * Creates a new PixRecord RecordBuilder by copying an existing PixRecord instance.
   * @param other The existing instance to copy.
   * @return A new PixRecord RecordBuilder
   */
  public static com.alura.pix.avro.PixRecord.Builder newBuilder(com.alura.pix.avro.PixRecord other) {
    if (other == null) {
      return new com.alura.pix.avro.PixRecord.Builder();
    } else {
      return new com.alura.pix.avro.PixRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for PixRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PixRecord>
    implements org.apache.avro.data.RecordBuilder<PixRecord> {

    private java.lang.CharSequence identificador;
    private java.lang.CharSequence chaveOrigem;
    private java.lang.CharSequence chaveDestino;
    private double valor;
    private java.lang.CharSequence dataTransferencia;
    private java.lang.CharSequence status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.alura.pix.avro.PixRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identificador)) {
        this.identificador = data().deepCopy(fields()[0].schema(), other.identificador);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.chaveOrigem)) {
        this.chaveOrigem = data().deepCopy(fields()[1].schema(), other.chaveOrigem);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.chaveDestino)) {
        this.chaveDestino = data().deepCopy(fields()[2].schema(), other.chaveDestino);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.valor)) {
        this.valor = data().deepCopy(fields()[3].schema(), other.valor);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dataTransferencia)) {
        this.dataTransferencia = data().deepCopy(fields()[4].schema(), other.dataTransferencia);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PixRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.alura.pix.avro.PixRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.identificador)) {
        this.identificador = data().deepCopy(fields()[0].schema(), other.identificador);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chaveOrigem)) {
        this.chaveOrigem = data().deepCopy(fields()[1].schema(), other.chaveOrigem);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chaveDestino)) {
        this.chaveDestino = data().deepCopy(fields()[2].schema(), other.chaveDestino);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.valor)) {
        this.valor = data().deepCopy(fields()[3].schema(), other.valor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dataTransferencia)) {
        this.dataTransferencia = data().deepCopy(fields()[4].schema(), other.dataTransferencia);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'identificador' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdentificador() {
      return identificador;
    }


    /**
      * Sets the value of the 'identificador' field.
      * @param value The value of 'identificador'.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder setIdentificador(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.identificador = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identificador' field has been set.
      * @return True if the 'identificador' field has been set, false otherwise.
      */
    public boolean hasIdentificador() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identificador' field.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder clearIdentificador() {
      identificador = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'chaveOrigem' field.
      * @return The value.
      */
    public java.lang.CharSequence getChaveOrigem() {
      return chaveOrigem;
    }


    /**
      * Sets the value of the 'chaveOrigem' field.
      * @param value The value of 'chaveOrigem'.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder setChaveOrigem(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.chaveOrigem = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'chaveOrigem' field has been set.
      * @return True if the 'chaveOrigem' field has been set, false otherwise.
      */
    public boolean hasChaveOrigem() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'chaveOrigem' field.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder clearChaveOrigem() {
      chaveOrigem = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'chaveDestino' field.
      * @return The value.
      */
    public java.lang.CharSequence getChaveDestino() {
      return chaveDestino;
    }


    /**
      * Sets the value of the 'chaveDestino' field.
      * @param value The value of 'chaveDestino'.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder setChaveDestino(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.chaveDestino = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'chaveDestino' field has been set.
      * @return True if the 'chaveDestino' field has been set, false otherwise.
      */
    public boolean hasChaveDestino() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'chaveDestino' field.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder clearChaveDestino() {
      chaveDestino = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'valor' field.
      * @return The value.
      */
    public double getValor() {
      return valor;
    }


    /**
      * Sets the value of the 'valor' field.
      * @param value The value of 'valor'.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder setValor(double value) {
      validate(fields()[3], value);
      this.valor = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'valor' field has been set.
      * @return True if the 'valor' field has been set, false otherwise.
      */
    public boolean hasValor() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'valor' field.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder clearValor() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataTransferencia' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataTransferencia() {
      return dataTransferencia;
    }


    /**
      * Sets the value of the 'dataTransferencia' field.
      * @param value The value of 'dataTransferencia'.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder setDataTransferencia(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.dataTransferencia = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dataTransferencia' field has been set.
      * @return True if the 'dataTransferencia' field has been set, false otherwise.
      */
    public boolean hasDataTransferencia() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dataTransferencia' field.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder clearDataTransferencia() {
      dataTransferencia = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.alura.pix.avro.PixRecord.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PixRecord build() {
      try {
        PixRecord record = new PixRecord();
        record.identificador = fieldSetFlags()[0] ? this.identificador : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.chaveOrigem = fieldSetFlags()[1] ? this.chaveOrigem : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.chaveDestino = fieldSetFlags()[2] ? this.chaveDestino : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.valor = fieldSetFlags()[3] ? this.valor : (java.lang.Double) defaultValue(fields()[3]);
        record.dataTransferencia = fieldSetFlags()[4] ? this.dataTransferencia : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PixRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<PixRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PixRecord>
    READER$ = (org.apache.avro.io.DatumReader<PixRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.identificador);

    out.writeString(this.chaveOrigem);

    out.writeString(this.chaveDestino);

    out.writeDouble(this.valor);

    out.writeString(this.dataTransferencia);

    out.writeString(this.status);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.identificador = in.readString(this.identificador instanceof Utf8 ? (Utf8)this.identificador : null);

      this.chaveOrigem = in.readString(this.chaveOrigem instanceof Utf8 ? (Utf8)this.chaveOrigem : null);

      this.chaveDestino = in.readString(this.chaveDestino instanceof Utf8 ? (Utf8)this.chaveDestino : null);

      this.valor = in.readDouble();

      this.dataTransferencia = in.readString(this.dataTransferencia instanceof Utf8 ? (Utf8)this.dataTransferencia : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.identificador = in.readString(this.identificador instanceof Utf8 ? (Utf8)this.identificador : null);
          break;

        case 1:
          this.chaveOrigem = in.readString(this.chaveOrigem instanceof Utf8 ? (Utf8)this.chaveOrigem : null);
          break;

        case 2:
          this.chaveDestino = in.readString(this.chaveDestino instanceof Utf8 ? (Utf8)this.chaveDestino : null);
          break;

        case 3:
          this.valor = in.readDouble();
          break;

        case 4:
          this.dataTransferencia = in.readString(this.dataTransferencia instanceof Utf8 ? (Utf8)this.dataTransferencia : null);
          break;

        case 5:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










